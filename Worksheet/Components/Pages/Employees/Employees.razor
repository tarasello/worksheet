@page "/"
@page "/employees"
@using Worksheet.Model
@inject IHttpClientFactory ClientFactory
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Сотрудники</PageTitle>

<div class="editor-container">
    <div class="editor-header">
        <div class="editor-header-text">Сотрудники</div>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" @onclick="()=>AddEmployee()">Добавить</MudButton>
    </div>

    @if (employees == null)
    {
        <p><em>Загрузка сотрудников...</em></p>
    }
    else
    {
        <MudTable Items="@employees" Hover="true">
            <HeaderContent>
                <MudTh>Фамилия</MudTh>
                <MudTh>Имя</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd class="cell-text">@context.LastName</MudTd>
                <MudTd class="cell-text">@context.FirstName</MudTd>
                <MudTd style="width: 10px; padding: 4px"><MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" @onclick="()=>EditEmployee(context.Id)"></MudIconButton></MudTd>
                <MudTd style="width: 10px; padding: 4px"><MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" @onclick="()=>DeleteEmployee(context.Id)"></MudIconButton></MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    private List<Employee>? employees;

    private HttpClient httpClient = null;

    protected override async Task OnInitializedAsync()
    {
        httpClient = ClientFactory.CreateClient("LocalApi");
        employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/employees");
    }

    private async Task<EventCallback> DeleteEmployee(int employeeId)
    {
        await httpClient.DeleteAsync("api/employees/del/" + employeeId);
        employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/employees");

        // Ре-рендер страницы после удаления записи
        await InvokeAsync(StateHasChanged);

        return new EventCallback();
    }

    private void AddEmployee()
    {
        Navigation.NavigateTo("/employee/add");
    }

    private void EditEmployee(int employeeId)
    {
        Navigation.NavigateTo("/employee/edit/" + employeeId);
    }
}
